//
//  PostWriteViewController.swift

import UIKit
import Firebase

class PostWriteViewController: UIViewController {
    
    enum BtnTag: Int{
        case gallary = 1
        case upload
    }
    
    @IBOutlet weak var imageView: UIImageView?
    var imageUrl: URL?
    //var ext: String = ""
    
    // MARK: 버튼
    @IBAction func handleBtn(_ sender: UIButton){
        guard let btnTag = BtnTag(rawValue: sender.tag) else {return}
        switch btnTag {
        case .gallary:
            let imagePickerController = UIImagePickerController()
            imagePickerController.delegate = self
            imagePickerController.allowsEditing = true
            imagePickerController.sourceType = .photoLibrary
            present(imagePickerController, animated: true)
        case .upload:
            if let image = imageView?.image, let imageUrl = imageUrl {
                /*var base64: String = ""
                if ext == "jpeg" || ext == "jpg" {
                    if let base64String = UIImageJPEGRepresentation(image, 1.0)?.base64EncodedString() {
                        base64 = base64String
                    }
                } else if ext == "png" {
                    if let base64String = UIImagePNGRepresentation(image)?.base64EncodedString() {
                        base64 = base64String
                    }
                } else { return }*/
                if let user = Auth.auth().currentUser {
                    
                    let ref = Database.database().reference()
                    let autoGeneratedKey = ref.child("posts").childByAutoId().key
                    
                    let storageRef = Storage.storage().reference().child(autoGeneratedKey)
                    let uploadTask = storageRef.putFile(from: imageUrl, metadata: nil) { metadata, error in
                        if let error = error {
                            print("Uh-oh, an error occurred!")
                        } else {
                            if let downloadURL = metadata!.downloadURL() {
                                var post = Post()
                                post.title = ""
                                post.imageUrl = downloadURL.absoluteString
                                post.uid = user.uid
                                
                                let childUpdates = ["/posts/\(autoGeneratedKey)": post,
                                                    "/user-posts/\(user.uid)/\(autoGeneratedKey)/": post]
                                ref.updateChildValues(childUpdates)
                                
                                print("success")
                            } else {
                                print("fail downloadURL")
                            }
                        }
                    }
                    
                }
            }
            
            break
        }
    }
    
}

// MARK: UIImagePickerControllerDelegate
extension PostWriteViewController: UIImagePickerControllerDelegate{
    
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : Any]) {
        if  let image = info[UIImagePickerControllerOriginalImage] as? UIImage,
            let url = info[UIImagePickerControllerImageURL] as? URL
        {
            //let urlString = url.absoluteString
            //let startIndex = urlString.index(urlString.index(of: ".")!, offsetBy: 1)
            //ext = String(urlString[startIndex...])
            imageView?.image = image
            imageUrl = url
        }
        picker.dismiss(animated: true, completion: nil)
    }
    
}

// MARK: UINavigationControllerDelegate
extension PostWriteViewController: UINavigationControllerDelegate{
    
}
